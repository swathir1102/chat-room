{"ast":null,"code":"import consumer from \"./consumer\";\ndocument.addEventListener('turbolinks:load', function () {\n  var room_element = document.getElementById('room-id');\n  var room_id = Number(room_element.getAttribute('data-room-id'));\n  consumer.subscriptions.create({\n    channel: \"RoomChannel\",\n    room_id: room_id\n  }, {\n    connected: function connected() {\n      console.log(\"connected to \" + room_id);\n    },\n    disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n    },\n    received: function received(data) {\n      var user_element = document.getElementById('user-id');\n      var user_id = Number(user_element.getAttribute('data-user-id'));\n      var html;\n\n      if (user_id === data.message.user_id) {\n        html = data.mine;\n      } else {\n        html = data.theirs;\n      }\n\n      var messageContainer = document.getElementById('messages');\n      messageContainer.innerHTML = messageContainer.innerHTML + html;\n    }\n  });\n});","map":{"version":3,"sources":["/Users/swathi/Documents/WebEx/chat-room/app/javascript/channels/room_channel.js"],"names":["consumer","document","addEventListener","room_element","getElementById","room_id","Number","getAttribute","subscriptions","create","channel","connected","console","log","disconnected","received","data","user_element","user_id","html","message","mine","theirs","messageContainer","innerHTML"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,iBAA1B,EAA6C,YAAM;AACjD,MAAMC,YAAY,GAAGF,QAAQ,CAACG,cAAT,CAAwB,SAAxB,CAArB;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACH,YAAY,CAACI,YAAb,CAA0B,cAA1B,CAAD,CAAtB;AACAP,EAAAA,QAAQ,CAACQ,aAAT,CAAuBC,MAAvB,CAA8B;AAAEC,IAAAA,OAAO,EAAE,aAAX;AAA0BL,IAAAA,OAAO,EAAEA;AAAnC,GAA9B,EAA4E;AAC1EM,IAAAA,SAD0E,uBAC9D;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBR,OAA9B;AACD,KAHyE;AAK1ES,IAAAA,YAL0E,0BAK3D,CACb;AACD,KAPyE;AAS1EC,IAAAA,QAT0E,oBASjEC,IATiE,EAS3D;AACb,UAAMC,YAAY,GAAGhB,QAAQ,CAACG,cAAT,CAAwB,SAAxB,CAArB;AACA,UAAMc,OAAO,GAAGZ,MAAM,CAACW,YAAY,CAACV,YAAb,CAA0B,cAA1B,CAAD,CAAtB;AAEA,UAAIY,IAAJ;;AAEA,UAAID,OAAO,KAAKF,IAAI,CAACI,OAAL,CAAaF,OAA7B,EAAuC;AACrCC,QAAAA,IAAI,GAAGH,IAAI,CAACK,IAAZ;AACD,OAFD,MAEO;AACLF,QAAAA,IAAI,GAAGH,IAAI,CAACM,MAAZ;AACD;;AAED,UAAMC,gBAAgB,GAAGtB,QAAQ,CAACG,cAAT,CAAwB,UAAxB,CAAzB;AACAmB,MAAAA,gBAAgB,CAACC,SAAjB,GAA6BD,gBAAgB,CAACC,SAAjB,GAA6BL,IAA1D;AACC;AAvBuE,GAA5E;AAyBD,CA5BD","sourcesContent":["import consumer from \"./consumer\"\n\ndocument.addEventListener('turbolinks:load', () => {\n  const room_element = document.getElementById('room-id');\n  const room_id = Number(room_element.getAttribute('data-room-id'));\n  consumer.subscriptions.create({ channel: \"RoomChannel\", room_id: room_id }, {\n    connected() {\n      console.log(\"connected to \" + room_id)\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      const user_element = document.getElementById('user-id');\n      const user_id = Number(user_element.getAttribute('data-user-id'));\n\n      let html;\n\n      if (user_id === data.message.user_id ) {\n        html = data.mine\n      } else {\n        html = data.theirs\n      }\n\n      const messageContainer = document.getElementById('messages')\n      messageContainer.innerHTML = messageContainer.innerHTML + html\n      }\n  });\n})\n"]},"metadata":{},"sourceType":"module"}